


<!DOCTYPE html>
<html>
  <head>
   <meta name="viewport" content="initial-scale=1.0, user-scalable=no">
    <meta charset="utf-8">
	
	<style> 
	body { 
	background: darkslategray;
	} 
		#Container {
    width: 40%;
    height: 200px;
    background: darkslategray;
    padding-right: 99%; 
	padding-bottom: 39%;
	}	
	
	#title_div { 
		text-align: center; 	
	position: absolute;
    width: 98%;
    background: coral;
    height: 9%;
	
	} 
	
	#Search_bar_div { 
	margin-left: 0%;
    height: 31%;
    background: blue;
    position: absolute;
    width: 40%;
	margin-top: 4%; 
	} 
	
	#map { 
	margin-left: 40%;
    height: 79%;
    background: yellow;
    position: absolute;
    width: 58%;
	margin-top: 4%; 

}	
	
	#Entries_div { 
	background-color: brown; 
	position: absolute; 
	width: 40%; 
	height: 50%; 
	margin-top: 18%; 
	} 
	
	#Bottom_navigation { 
	position: absolute;
    margin-top: 40%;
    width: 98%;
	background-color: #FFC0CB; 
	}
	
	input[type="text"] {
    display: block;
    margin : 0 auto;
	position: relative;
	top: 20%;
    width: 95%;
	height: 20%;
	font-size: 1vw; 
        }

	</style> 
	
  </head> 
  
<body> 
  
  
  <selection id="Container"> 

<div id="title_div">   
  <p center> Google Map API </p /center> 
</div> 
  <div id="Search_bar_div"> 
   <input id="SearchAddress" type="text" class="controls" placeholder="Please Enter a address.">
  </div> 
  
    <div id="map"></div> 
    
    <div id="Entries_div"> 
   <h3>Entries_div</h3>
  </div> 

    <div id="Bottom_navigation"> 
     <h3>Bottom_navigation</h3>
  </div> --> 
 </selection> 
  
  
  <script> 
  
  
	function initAutocomplete() { 
		
		// Display the map 
		var map = new google.maps.Map(document.getElementById('map'), {
          center: {lat: 38.251767, lng: -85.753965},
          zoom: 13,
          mapTypeId: 'roadmap'
        });
	
		// Obtain user search and data. 
		var input = document.getElementById('SearchAddress');
        var searchBox = new google.maps.places.SearchBox(input);


		var markers = [];
		searchBox.addListener('places_changed', function() {
          var places = searchBox.getPlaces();

          if (places.length == 0) {
            return;
          }

          // Clear out the old markers.
          markers.forEach(function(marker) {
            marker.setMap(null);
          });
          markers = [];
	

          // For each place, get the icon, name and location.
          var bounds = new google.maps.LatLngBounds();
          places.forEach(function(place) {
            if (!place.geometry) {
              console.log("Returned place contains no geometry");
              return;
            }
            var icon = {
              url: place.icon,
              size: new google.maps.Size(71, 71),
              origin: new google.maps.Point(0, 0),
              anchor: new google.maps.Point(17, 34),
              scaledSize: new google.maps.Size(25, 25)
            };

            // Create a marker for each place.
            markers.push(new google.maps.Marker({
              map: map,
              icon: icon,
              title: place.name,
              position: place.geometry.location
            }));

            if (place.geometry.viewport) {
              // Only geocodes have viewport.
              bounds.union(place.geometry.viewport);
            } else {
              bounds.extend(place.geometry.location);
            }
          });
          map.fitBounds(bounds);
         	  });
	} // End of initAutocomplete Function. 
  </script> 
  
  <!-- API Key--> 
  <script src="https://maps.googleapis.com/maps/api/js?key= __Google Key__&libraries=places&callback=initAutocomplete"async defer></script>
	
  
  
</body>
</html>
